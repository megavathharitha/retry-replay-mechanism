{"ast":null,"code":"var _jsxFileName = \"/Users/hb0306/Documents/retryReplayProject/retry-replay-ui/src/FailedTransactions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FailedTransactions() {\n  _s();\n  const [failedTransactions, setFailedTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetch('/api/replay/failed') // Assuming your backend runs on the same host, different port\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      setFailedTransactions(data);\n      setLoading(false);\n    }).catch(error => {\n      setError(error);\n      setLoading(false);\n    });\n  }, []);\n  const handleReplay = transactionId => {\n    fetch(`/api/replay/trigger/${transactionId}`, {\n      method: 'POST'\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.text();\n    }).then(message => {\n      alert(message);\n      // Optionally refresh the failed transactions list\n      fetch('/api/replay/failed').then(response => response.json()).then(data => setFailedTransactions(data));\n    }).catch(error => {\n      console.error(\"Error triggering replay:\", error);\n      alert(\"Failed to trigger replay.\");\n    });\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading failed transactions...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error loading failed transactions: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Failed Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Created At\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Error\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: failedTransactions.map(transaction => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: transaction.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: transaction.transactionType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: transaction.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: new Date(transaction.createdAt).toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: transaction.errorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleReplay(transaction.id),\n              children: \"Replay\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 29\n          }, this)]\n        }, transaction.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n_s(FailedTransactions, \"n4boQpggb/w918Hp171JX3q2CAA=\");\n_c = FailedTransactions;\nexport default FailedTransactions;\nvar _c;\n$RefreshReg$(_c, \"FailedTransactions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","FailedTransactions","_s","failedTransactions","setFailedTransactions","loading","setLoading","error","setError","fetch","then","response","ok","Error","status","json","data","catch","handleReplay","transactionId","method","text","message","alert","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","transaction","id","transactionType","Date","createdAt","toLocaleString","errorMessage","onClick","_c","$RefreshReg$"],"sources":["/Users/hb0306/Documents/retryReplayProject/retry-replay-ui/src/FailedTransactions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction FailedTransactions() {\n    const [failedTransactions, setFailedTransactions] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        fetch('/api/replay/failed') // Assuming your backend runs on the same host, different port\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then(data => {\n                setFailedTransactions(data);\n                setLoading(false);\n            })\n            .catch(error => {\n                setError(error);\n                setLoading(false);\n            });\n    }, []);\n\n    const handleReplay = (transactionId) => {\n        fetch(`/api/replay/trigger/${transactionId}`, {\n            method: 'POST',\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.text();\n        })\n        .then(message => {\n            alert(message);\n            // Optionally refresh the failed transactions list\n            fetch('/api/replay/failed')\n                .then(response => response.json())\n                .then(data => setFailedTransactions(data));\n        })\n        .catch(error => {\n            console.error(\"Error triggering replay:\", error);\n            alert(\"Failed to trigger replay.\");\n        });\n    };\n\n    if (loading) return <p>Loading failed transactions...</p>;\n    if (error) return <p>Error loading failed transactions: {error.message}</p>;\n\n    return (\n        <div>\n            <h2>Failed Transactions</h2>\n            <table>\n                <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>Type</th>\n                        <th>Status</th>\n                        <th>Created At</th>\n                        <th>Error</th>\n                        <th>Action</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {failedTransactions.map(transaction => (\n                        <tr key={transaction.id}>\n                            <td>{transaction.id}</td>\n                            <td>{transaction.transactionType}</td>\n                            <td>{transaction.status}</td>\n                            <td>{new Date(transaction.createdAt).toLocaleString()}</td>\n                            <td>{transaction.errorMessage}</td>\n                            <td>\n                                <button onClick={() => handleReplay(transaction.id)}>Replay</button>\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default FailedTransactions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}